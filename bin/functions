#!/usr/bin/env bash

DEFAULT_CLPM_VERSION="0.3.5"
CACHE_DIR="/tmp/asdf-sbcl.cache"
mkdir -p ${CACHE_DIR}

case $(uname -s) in
Darwin)
    BOOTSTRAP_COMPILER="https://github.com/emotiq/sbcl-binaries/releases/download/1.4.8/sbcl-1.4.8-x86-64-darwin-binary.tar.bz2"
    OS="darwin"
    STAT="stat -f %c ${CACHE_DIR}/*"
    TEMP_DIR=$(mktemp -dt asdf-sbcl)
    ;;
Linux)
    BOOTSTRAP_COMPILER="https://github.com/emotiq/sbcl-binaries/releases/download/1.4.8/sbcl-1.4.8-x86-64-linux-binary.tar.bz2"
    OS="linux"
    STAT="stat -c %Z ${CACHE_DIR}/*"
    TEMP_DIR=$(mktemp -dp /tmp asdf-sbcl.XXXXXXXX)
    ;;
esac

case ${GITHUB_PAT} in
"") CURL_AUTH="" ;;
*) CURL_AUTH="Authorization: token ${GITHUB_PAT}" ;;
esac

function check-jq() {
    bold=$(tput bold)
    nc=$(tput sgr0)
    USAGE="Install ${bold}jq${nc} to continue. Aborting."

    if ! [ -x "$(command -v jq)" ]; then
        printf "$USAGE" >&2
        exit 1
    fi
}

trap "cd ${PWD}; rm -rf ${TEMP_DIR}" EXIT

function retrieve-tags() {
    LAST=$(curl -Ss -I -H "${CURL_AUTH}" https://api.github.com/repos/sbcl/sbcl/tags |
        perl -n -e'/page=\d+.*page=(\d+)/ && print $1')
    for i in $(seq ${LAST}); do
        curl -Ss -H "${CURL_AUTH}" https://api.github.com/repos/sbcl/sbcl/tags?page=$i
    done
}

function retrieve-json() {
    if [[ ! -e "${CACHE_DIR}/asdf-sbcl.json" ]] || [[ $(set -- $(${STAT}) && echo ${1}) -le $(($(date +%s) - 3600)) ]]; then
        VERSIONS='add | map(select(.name | test("^sbcl-[0-9]"))) | .[].name |= sub("^sbcl-";"")'
        retrieve-tags | jq -s "${VERSIONS}" >${CACHE_DIR}/asdf-sbcl.json
    fi
}

function install-bootstrap() {
    if [[ ! -e "${CACHE_DIR}/bootstrap/bin/sbcl" ]]; then
        curl -Lo ${TEMP_DIR}/bootstrap.tar.bz2 -C - ${BOOTSTRAP_COMPILER}
        mkdir -p ${TEMP_DIR}/bootstrap-installer ${CACHE_DIR}/bootstrap
        tar -xvf ${TEMP_DIR}/bootstrap.tar.bz2 -C ${TEMP_DIR}/bootstrap-installer --strip-components 1 || exit 1
        cd ${TEMP_DIR}/bootstrap-installer
        INSTALL_ROOT=${CACHE_DIR}/bootstrap sh install.sh
    fi
}

function list-all() {
    retrieve-json
    jq -r '.[].name' ${CACHE_DIR}/asdf-sbcl.json |
        sort -t. -k 1,1n -k 2,2n -k 3,3n |
        tr '\n' ' '
}

function construct_configure_options() {
    if [ "$SBCL_CONFIGURE_OPTIONS" = "" ]; then
        local configure_options="--with-sb-core-compression --with-sb-thread"
    else
        local configure_options="$SBCL_CONFIGURE_OPTIONS"
    fi

    echo "$configure_options"
}

function install_sources_conf() {
    local path=$HOME/.config/clpm/sources.conf
    local quicklisp_setting='("quicklisp"\n  :type :ql-clpi\n  :url "https://quicklisp.common-lisp-project-index.org/")'
    mkdir -p ~/.config/clpm
    echo -e $quicklisp_setting >$path
    FINAL_RESPONSE="$FINAL_RESPONSE\n  clpm - Set up clpm source: $path."
}

function setup_sbcl_rc() {
    if grep --no-messages -qF '#-clpm-client' $HOME/.sbclrc; then
        FINAL_RESPONSE="$FINAL_RESPONSE\n  clpm - Leaving .sbclrc untouched since it already configured."
    else
        # This performs the old-school push to the *central-registry* instead
        # of adding configuration to
        # $HOME/.config/common-lisp/source-registry.conf.d.  This is done
        # because the source-registry method doesn't allow for dynamic config,
        # which is required for this asdf-vm implementation.  I am still
        # investigating the consequences of doing it this way.
        ${ASDF_INSTALL_PATH}/bin/clpm client rc | sed 's/#-clpm-client/#-clpm-client\n(push (pathname (sb-unix::posix-getenv "CLPM_CLIENT_PATH")) asdf:*central-registry*)/' |
            sed -E 's/;;; Generated by CLPM (.+)/;;; Generated by CLPM \1\n;;; Push of CLPM_CLIENT_PATH environment variable to *central-registry* modified by sbcl asdf-vm plugin/' >>$HOME/.sbclrc
        FINAL_RESPONSE="$FINAL_RESPONSE\n  clpm - Added clpm configuration: ~/.sbclrc."
    fi
}

function install_clpm() {
    # This will need to be updated for arm for linux and darwin.  It currently only supports amd64 for both
    case $(uname -s) in
    Darwin)
        CLPM_URL="https://files.clpm.dev/clpm/clpm-amd64-darwin-v${CLPM_VERSION}.tar.gz"
        ;;
    Linux)
        CLPM_URL="https://files.clpm.dev/clpm/clpm-amd64-linux-gnu-v${CLPM_VERSION}.tar.gz"
        ;;
    esac
    mkdir -p ${TEMP_DIR}/clpm && curl -Lo ${TEMP_DIR}/clpm/clpm-${CLPM_VERSION}.tar.gz -C - ${CLPM_URL}
    tar -xvf ${TEMP_DIR}/clpm/clpm-${CLPM_VERSION}.tar.gz -C ${TEMP_DIR}/clpm/
    cd ${TEMP_DIR}/clpm/clpm-v${CLPM_VERSION}
    INSTALL_ROOT=${ASDF_INSTALL_PATH} ./install.sh
    FINAL_RESPONSE="$FINAL_RESPONSE\n  Installed clpm:"
    install_sources_conf
    setup_sbcl_rc
}

function install_extras() {
    if [ "$SKIP_INSTALLING_CLPM" = "" ]; then
        if [ "$CLPM_VERSION" = "" ]; then
            CLPM_VERSION=$DEFAULT_CLPM_VERSION
        fi
        install_clpm
    fi
}

function install() {
    install-bootstrap
    SHA_QUERY=".[] | select(.name == \"${ASDF_INSTALL_VERSION}\") | .commit.sha"
    SHA=$(jq -r "${SHA_QUERY}" ${CACHE_DIR}/asdf-sbcl.json)
    local configure_options="$(construct_configure_options)"

    if [[ ! -d "${CACHE_DIR}/sbcl/.git" ]]; then
        git -C ${CACHE_DIR} clone https://github.com/sbcl/sbcl.git
    fi

    cd ${CACHE_DIR}/sbcl
    git fetch --all
    git checkout ${SHA}
    PATH=${CACHE_DIR}/bootstrap/bin:${PATH} INSTALL_ROOT=${ASDF_INSTALL_PATH} SBCL_HOME=${CACHE_DIR}/bootstrap/lib/sbcl sh make.sh ${configure_options} &&
        INSTALL_ROOT=${ASDF_INSTALL_PATH} SBCL_HOME=${ASDF_INSTALL_PATH}/lib/sbcl sh install.sh
    FINAL_RESPONSE="$FINAL_RESPONSE\nInstalled SBCL."
    install_extras
    ${ASDF_INSTALL_PATH}/lib/clpm exec -- ${ASDF_INSTALL_PATH}/lib/sbcl --version
}

case $(basename ${0}) in
list-all)
    check-jq && list-all
    ;;
install)
    check-jq && install && echo -e $FINAL_RESPONSE
    ;;
esac
