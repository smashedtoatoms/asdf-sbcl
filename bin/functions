#!/usr/bin/env bash

CACHE_DIR="/tmp/asdf-sbcl.cache"
mkdir -p ${CACHE_DIR}

case $(uname -s) in
    Darwin) BOOTSTRAP_COMPILER="https://github.com/emotiq/sbcl-binaries/releases/download/1.4.8/sbcl-1.4.8-x86-64-darwin-binary.tar.bz2"
            OS="darwin"
            STAT="stat -f %c ${CACHE_DIR}/*"
            TEMP_DIR=$(mktemp -dt asdf-sbcl)
            ;;
    Linux) BOOTSTRAP_COMPILER="https://github.com/emotiq/sbcl-binaries/releases/download/1.4.8/sbcl-1.4.8-x86-64-linux-binary.tar.bz2"
           OS="linux"
           STAT="stat -c %Z ${CACHE_DIR}/*"
           TEMP_DIR=$(mktemp -dp /tmp asdf-sbcl.XXXXXXXX)
           ;;
esac

case ${GITHUB_PAT} in
    "") CURL_AUTH="" ;;
    *) CURL_AUTH="Authorization: token ${GITHUB_PAT}" ;;
esac

function check-jq() {
  bold=`tput bold`
  nc=`tput sgr0`
  USAGE="Install ${bold}jq${nc} to continue. Aborting."

  if ! [ -x "$(command -v jq)" ]
  then
    printf "$USAGE" >&2
    exit 1
  fi
}

trap "cd ${PWD}; rm -rf ${TEMP_DIR}" EXIT

function retrieve-tags {
    LAST=$(curl -Ss -I -H "${CURL_AUTH}" https://api.github.com/repos/sbcl/sbcl/tags |
           perl -n -e'/page=\d+.*page=(\d+)/ && print $1')
    for i in $(seq ${LAST})
    do
        curl -Ss -H "${CURL_AUTH}" https://api.github.com/repos/sbcl/sbcl/tags?page=$i
    done
}

function retrieve-json {
    if [[ ! -e "${CACHE_DIR}/asdf-sbcl.json" ]] || [[ $(set -- $(${STAT}) && echo ${1}) -le $(( `date +%s` - 3600)) ]]
    then
        VERSIONS='add | map(select(.name | test("^sbcl-[0-9]"))) | .[].name |= sub("^sbcl-";"")'
        retrieve-tags | jq -s "${VERSIONS}" > ${CACHE_DIR}/asdf-sbcl.json
    fi
}

function install-bootstrap {
    if [[ ! -e "${CACHE_DIR}/bootstrap/bin/sbcl" ]]
    then
        curl -Lo ${TEMP_DIR}/bootstrap.tar.bz2 -C - ${BOOTSTRAP_COMPILER}
        mkdir -p ${TEMP_DIR}/bootstrap-installer ${CACHE_DIR}/bootstrap
        tar -xvf ${TEMP_DIR}/bootstrap.tar.bz2 -C ${TEMP_DIR}/bootstrap-installer --strip-components 1 || exit 1
        cd ${TEMP_DIR}/bootstrap-installer
        INSTALL_ROOT=${CACHE_DIR}/bootstrap sh install.sh
    fi
}

function list-all {
    retrieve-json
    jq -r '.[].name' ${CACHE_DIR}/asdf-sbcl.json |
        sort -t. -k 1,1n -k 2,2n -k 3,3n |
        tr '\n' ' '
}

function install {
    install-bootstrap
    SHA_QUERY=".[] | select(.name == \"${ASDF_INSTALL_VERSION}\") | .commit.sha"
    SHA=$(jq -r "${SHA_QUERY}" ${CACHE_DIR}/asdf-sbcl.json)

    if [[ ! -d "${CACHE_DIR}/sbcl/.git" ]]
    then
        git -C ${CACHE_DIR} clone https://github.com/sbcl/sbcl.git
    fi

    cd ${CACHE_DIR}/sbcl
    git fetch --all
    git checkout ${SHA}
    PATH=${CACHE_DIR}/bootstrap/bin:${PATH} INSTALL_ROOT=${ASDF_INSTALL_PATH} SBCL_HOME=${CACHE_DIR}/bootstrap/lib/sbcl sh make.sh &&
    INSTALL_ROOT=${ASDF_INSTALL_PATH} SBCL_HOME=${ASDF_INSTALL_PATH}/lib/sbcl sh install.sh
}

function install-quicklisp {
    curl -o /tmp/ql.lisp http://beta.quicklisp.org/quicklisp.lisp
    SBCL_HOME="$ASDF_INSTALL_PATH/lib/sbcl" ${ASDF_INSTALL_PATH}/bin/sbcl --no-sysinit --no-userinit --load /tmp/ql.lisp \
        --eval '(quicklisp-quickstart:install :path (concatenate '"'"'string (sb-unix::posix-getenv "ASDF_INSTALL_PATH") "/quicklisp"))' \
        --quit
    rm -rf /tmp/ql.lisp

    SBCLRC=~/.sbclrc
    if [ ! -f "$SBCLRC" ]; then
        echo ';;; The following lines were added by asdf-sbcl' >> $SBCLRC
        echo ';;; QUICKLISP_HOME environment variable is set by asdf-sbcl upon running of sbcl' >> $SBCLRC
        echo '#-quicklisp' >> $SBCLRC
        echo '(let ((quicklisp-init (concatenate' >> $SBCLRC
        echo '                       '"'"'string' >> $SBCLRC
        echo '                       (sb-unix::posix-getenv "QUICKLISP_HOME")' >> $SBCLRC
        echo '                       "/setup.lisp")))' >> $SBCLRC
        echo '  (when (probe-file quicklisp-init)' >> $SBCLRC
        echo '    (load quicklisp-init)))' >> $SBCLRC
        echo '' >> $SBCLRC
    fi
}

function install-qlot {
    SBCLRC=~/.sbclrc
    if [ -f "$SBCLRC" ]; then
        SBCL_HOME="$ASDF_INSTALL_PATH/lib/sbcl" ${ASDF_INSTALL_PATH}/bin/sbcl \
        --eval '(load (concatenate '"'"'string (sb-unix::posix-getenv "ASDF_INSTALL_PATH") "/quicklisp/setup.lisp"))' \
        --eval '(ql:quickload :qlot)' \
        --quit
    fi
}

case `basename ${0}` in
    list-all) check-jq && list-all
              ;;
    install) check-jq && install && install-quicklisp && install-qlot
             ;;
esac
