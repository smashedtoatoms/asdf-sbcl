#!/usr/bin/env bash

DEFAULT_CLPM_VERSION="0.4.0-alpha.1" # This must be >= 0.4.0-alpha.1 to correctly handle the *central-registry*
CACHE_DIR="/tmp/asdf-sbcl.cache"
SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

mkdir -p ${CACHE_DIR}

case $(uname -s) in
Darwin)
    BOOTSTRAP_COMPILER="https://github.com/emotiq/sbcl-binaries/releases/download/1.4.8/sbcl-1.4.8-x86-64-darwin-binary.tar.bz2"
    OS="darwin"
    ARCH="$(uname -p)"
    STAT="stat -f %c ${CACHE_DIR}/*"
    TEMP_DIR=$(mktemp -dt asdf-sbcl)
    ;;
Linux)
    BOOTSTRAP_COMPILER="https://github.com/emotiq/sbcl-binaries/releases/download/1.4.8/sbcl-1.4.8-x86-64-linux-binary.tar.bz2"
    OS="linux"
    ARCH="$(uname -p)"
    STAT="stat -c %Z ${CACHE_DIR}/*"
    TEMP_DIR=$(mktemp -dp /tmp asdf-sbcl.XXXXXXXX)
    ;;
esac

case ${GITHUB_PAT} in
"") CURL_AUTH="" ;;
*) CURL_AUTH="Authorization: token ${GITHUB_PAT}" ;;
esac

function check-jq() {
    bold=$(tput bold)
    nc=$(tput sgr0)
    USAGE="Install ${bold}jq${nc} to continue. Aborting."

    if ! [ -x "$(command -v jq)" ]; then
        printf "$USAGE" >&2
        exit 1
    fi
}

trap "cd ${PWD}; rm -rf ${TEMP_DIR}" EXIT

function retrieve-tags() {
    LAST=$(curl -Ss -I -H "${CURL_AUTH}" https://api.github.com/repos/sbcl/sbcl/tags |
        perl -n -e'/page=\d+.*page=(\d+)/ && print $1')
    for i in $(seq ${LAST}); do
        curl -Ss -H "${CURL_AUTH}" https://api.github.com/repos/sbcl/sbcl/tags?page=$i
    done
}

function retrieve-json() {
    if [[ ! -e "${CACHE_DIR}/asdf-sbcl.json" ]] || [[ $(set -- $(${STAT}) && echo ${1}) -le $(($(date +%s) - 3600)) ]]; then
        VERSIONS='add | map(select(.name | test("^sbcl-[0-9]"))) | .[].name |= sub("^sbcl-";"")'
        retrieve-tags | jq -s "${VERSIONS}" >${CACHE_DIR}/asdf-sbcl.json
    fi
}

function install-bootstrap() {
    if [[ ! -e "${CACHE_DIR}/bootstrap/bin/sbcl" ]]; then
        curl -Lo ${TEMP_DIR}/bootstrap.tar.bz2 -C - ${BOOTSTRAP_COMPILER}
        mkdir -p ${TEMP_DIR}/bootstrap-installer ${CACHE_DIR}/bootstrap
        tar -xvf ${TEMP_DIR}/bootstrap.tar.bz2 -C ${TEMP_DIR}/bootstrap-installer --strip-components 1 || exit 1
        cd ${TEMP_DIR}/bootstrap-installer
        INSTALL_ROOT=${CACHE_DIR}/bootstrap sh install.sh
    fi
}

function list-all() {
    retrieve-json
    jq -r '.[].name' ${CACHE_DIR}/asdf-sbcl.json |
        sort -t. -k 1,1n -k 2,2n -k 3,3n |
        tr '\n' ' '
}

function construct_configure_options() {
    if [ "$SBCL_CONFIGURE_OPTIONS" = "" ]; then
        local configure_options="--with-sb-core-compression --with-sb-thread --with-sb-linkable-runtime"
    else
        local configure_options="$SBCL_CONFIGURE_OPTIONS"
    fi
    echo "$configure_options"
}

function install_sources_conf() {
    local path=$HOME/.config/clpm/sources.conf
    local quicklisp_setting='("quicklisp"\n  :type :ql-clpi\n  :url "https://quicklisp.common-lisp-project-index.org/")'
    mkdir -p $HOME/.config/clpm
    echo -e $quicklisp_setting >$path
    echo "Set up clpm source: $path." >/dev/stderr
}

function setup_source_registry() {
    local path=$HOME/.config/common-lisp/source-registry.conf.d/20-clpm-client.conf
    mkdir -p $HOME/.config/common-lisp/source-registry.conf.d
    ${ASDF_INSTALL_PATH}/bin/clpm client install
    ${ASDF_INSTALL_PATH}/bin/clpm client source-registry.d >$path
    echo "Set up common lisp source registry: $path." >/dev/stderr
}

function setup_sbcl_rc() {
    if [ -f "$HOME/.sbclrc" ]; then
        cp $HOME/.sbclrc $HOME/.sbclrc.$(date +"%Y%m%d_%H%M%S").bak
    fi
    ${ASDF_INSTALL_PATH}/bin/clpm client rc >$HOME/.sbclrc
}

function install_clpm() {
    case $(uname -s) in
    Darwin)
        if [ $ARCH = "arm" ]; then
            # Grabbing this from my git repo until it's officially up
            CLPM_URL="https://raw.githubusercontent.com/smashedtoatoms/files/main/clpm-${CLPM_VERSION}-darwin-arm64.tar.gz"
            CLPM_DIR="clpm-${CLPM_VERSION}-darwin-arm64"
        else
            CLPM_URL="https://files.clpm.dev/clpm/clpm-${CLPM_VERSION}-darwin-amd64.tar.gz"
            CLPM_DIR="clpm-${CLPM_VERSION}-darwin-amd64"
        fi
        ;;
    Linux)
        if [ $ARCH = "arm" ]; then
            CLPM_URL="https://files.clpm.dev/clpm/clpm-${CLPM_VERSION}-linux-arm64.tar.gz"
            CLPM_DIR="clpm-${CLPM_VERSION}-linux-arm64"
        else
            CLPM_URL="https://files.clpm.dev/clpm/clpm-${CLPM_VERSION}-linux-amd64.tar.gz"
            CLPM_DIR="clpm-${CLPM_VERSION}-linux-amd64"
        fi
        ;;
    esac
    mkdir -p ${TEMP_DIR}/clpm && curl -Lo ${TEMP_DIR}/clpm/clpm-${CLPM_VERSION}.tar.gz -C - ${CLPM_URL}
    tar -xvf ${TEMP_DIR}/clpm/clpm-${CLPM_VERSION}.tar.gz -C ${TEMP_DIR}/clpm/
    cd ${TEMP_DIR}/clpm/${CLPM_DIR}
    INSTALL_ROOT=${ASDF_INSTALL_PATH} ./install.sh
    echo "Installed CLPM for ${ARCH}64 $(uname -s):" >/dev/stderr
    install_sources_conf
    setup_source_registry
    setup_sbcl_rc
}

function install_extras() {
    if [ "$SKIP_INSTALLING_CLPM" = "" ]; then
        if [ "$CLPM_VERSION" = "" ]; then
            CLPM_VERSION=$DEFAULT_CLPM_VERSION
        fi
        install_clpm
    fi
}

function install() {
    local configure_options="$(construct_configure_options)"

    SHA_QUERY=".[] | select(.name == \"${ASDF_INSTALL_VERSION}\") | .commit.sha"
    SHA=$(jq -r "${SHA_QUERY}" ${CACHE_DIR}/asdf-sbcl.json)
    install-bootstrap

    if [[ ! -d "${CACHE_DIR}/sbcl/.git" ]]; then
        git -C ${CACHE_DIR} clone https://github.com/sbcl/sbcl.git
    fi
    cd ${CACHE_DIR}/sbcl
    git fetch --all
    git reset --hard origin/master
    rm -rf .git/rebase-apply
    git checkout ${SHA}

    if [ "${ASDF_INSTALL_VERSION}" = "2.1.2" ]; then
        echo "################# Patching SBCL #################" >/dev/stderr
        git am < "$SCRIPT_PATH/../patches/enable-sb-linkable-runtime-on-arm-and-arm64.patch"
        echo "################# Patched SBCL  #################" >/dev/stderr
    fi

    PATH=${CACHE_DIR}/bootstrap/bin:${PATH} INSTALL_ROOT=${ASDF_INSTALL_PATH} SBCL_HOME=${CACHE_DIR}/bootstrap/lib/sbcl sh make.sh ${configure_options} &&
        INSTALL_ROOT=${ASDF_INSTALL_PATH} SBCL_HOME=${ASDF_INSTALL_PATH}/lib/sbcl sh install.sh
    echo "Installed SBCL" >/dev/stderr

    install_extras
    if [ "$SKIP_INSTALLING_CLPM" = "" ]; then
      ${ASDF_INSTALL_PATH}/bin/clpm exec -- ${ASDF_INSTALL_PATH}/bin/sbcl --version
    else
      ${ASDF_INSTALL_PATH}/bin/sbcl --version
    fi
}

case $(basename ${0}) in
list-all)
    check-jq && list-all
    ;;
install)
    check-jq && install
    ;;
esac
